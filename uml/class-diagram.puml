@startuml クラス図
title クラス図

abstract class BalloonStateBase{
  balloonContext:BalloonContextInterface
  abstract onBeginBalloonState():void
  abstract onEndBalloonState():void
  abstract onStamp():void
  abstract update(dt:number):void
}
class BalloonStatePreparing extends BalloonStateBase{

}
class BalloonStateReady extends BalloonStateBase{

}
class BalloonStatePopping extends BalloonStateBase{

}
class BalloonStateAway extends BalloonStateBase{

}


interface BalloonContextInterface{

}



class ObjectLocation{
  foot:Foot
  balloon:Balloon
  constructor(foot:Foot,balloon:Balloon)
  destroy():void
}

class Foot{
  objectLocation:ObjectLocation
  update(dt:number:number):void
  destroy():void
  onActionCodeDown(code:string):void
  onActionCodeUp(code:string):void
  setObjectLocation(objectLocation?:ObjectLocation):void
}

class Balloon implements BalloonContextInterface{
  objectLocation:ObjectLocation
  balloonState:BalloonStateBase

  update(dt:number:number)
  destroy():void
  setObjectLocation(objectLocation?:ObjectLocation):void
}

abstract class PlayingStateBase{
  playingContext:PlayingContextInterface

  constructor(playingContext:PlayingContextInterface)
  abstract onBeginPlayingState():void
  abstract onEndPlayingState():void
  abstract update(dt:number):void
  abstract onCodeDown(code:string):void
  abstract onCodeUp(code:string):void
}

class PlayingStateCountdown extends PlayingStateBase{

}
class PlayingStateAction extends PlayingStateBase{

}

class PlayingStateTimeover extends PlayingStateBase{

}

interface PlayingContextInterface{
  updateCountdownTime(dt:number):boolean
  updateGameTime(dt:number):boolean
  updateTimeoutTime(dt:number):boolean
  setNextPlayingState(nextPlayingState:PlayingStateBase):void
}

abstract class SceneStateBase{
  sceneContext:SceneContextInterface

  constructor(sceneContext:SceneContextInterface)
  abstract onCodeDown(code:string):void
  abstract onCodeUp(code:string):void
  abstract onBeginSceneState():void
  abstract onEndSceneState():void
  abstract update(dt:number):void
}

class SceneStateTitle extends SceneStateBase{
}
class SceneStatePlaying extends SceneStateBase implements PlayingContextInterface{
  field:Field
  gameTime:number
  score:number
  currentPlayingState:SceneStateBase
  objectLocationList:ObjectLocation[3]
  --
}
class SceneStateResult extends SceneStateBase{
  score:number
  --
  constructor(sceneContext:SceneContextInterface,score:number)
}


interface SceneContextInterface{
  --
  setNextSceneState(nextSeneState:SceneStateBase):void
  submitScore(score:number,name:string)
}

class App implements SceneContextInterface{
  dataStore:DataStore
  --
  onKeyDown(event:KeyboardEvent):void
  onKeyUp(event:KeyboardEvent):void
  update(dt:number):void;
}


SceneStateBase o-up- SceneContextInterface
App o-right- SceneStateBase

SceneStatePlaying *-- "3" ObjectLocation
ObjectLocation *-- Foot
ObjectLocation *-- Balloon


BalloonStateBase o-up- BalloonContextInterface
Balloon o-right- BalloonStateBase


PlayingStateBase o-up- PlayingContextInterface
SceneStatePlaying o-left- PlayingStateBase

@enduml